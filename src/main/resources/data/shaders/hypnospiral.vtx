/*{
	"DESCRIPTION": "HypnoSpiral",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
         {
            "NAME": "zoom",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": -4.0,
            "MAX": 4.0
         },
          {
            "NAME": "brt",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": .1,
            "MAX": 20.
         },
         {
            "NAME": "palval",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": 0.0,
            "MAX": 9.9
         },
          {
            "NAME": "pw",
            "TYPE": "float",
            "DEFAULT": 1.3,
            "MIN": 0.0,
            "MAX": 5.0
         },
          {
            "NAME": "rspeed",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 10.0
         },
          {
            "NAME": "spirals",
            "TYPE": "float",
            "DEFAULT": 3.0,
            "MIN": 1.0,
            "MAX": 8.0
         },
          {
            "NAME": "thickness",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.01,
            "MAX": 0.5
         }
	]
}*/

#version 330


uniform float fTime;
uniform float zoom;
uniform float brt;
uniform float palval;
uniform float pw;
uniform float rspeed;
uniform float spirals;
uniform float thickness;

#include <palettes.vti>
#include <sdf2d.vti>
#include <consts.vti>

layout(location = 0) in vec3 position;
out vec3 outColor;

mat2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return mat2(c, -s, s, c);
}

float spiral(vec2 uv, float rotation) {
    vec2 rotUV = uv * Rot(rotation);
    
    // Convert to polar coordinates
    float angle = atan(rotUV.y, rotUV.x);
    float radius = length(rotUV);
    
    // Create spiral pattern
    float spiralAngle = angle + radius * spirals * 6.28318;
    
    // Generate the spiral bands
    float spiralPattern = sin(spiralAngle);
    
    // Create distance field for the spiral
    float d = abs(spiralPattern) - thickness;
    
    // Apply smoothstep and power for hypnotic effect
    d = smoothstep(0.0, 0.1, -d);
    d = pow(d * brt, pw);
    
    return clamp(d, 0., 1.);
}

void main() {
    vec2 uv = position.xy;
    
    // Center the coordinates
    uv = uv - 0.5;
    
    // Apply zoom
    uv *= zoom;
    
    vec3 color = vec3(1., 1., 1.);
    
    // Distance for palette calculation
    float pal_d = length(uv);
    
    // Create rotating spiral
    float rotation = fTime * rspeed * 0.5;
    float bright = spiral(uv, rotation);
    
    // Apply palette coloring
    color *= vec3(clamp(paletteN(pal_d + fTime * 0.3, palval) * bright, 0., 1.));
    
    outColor = color;
}